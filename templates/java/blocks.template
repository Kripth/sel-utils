--- start blocks Blocks.java ---
package sul;

import java.util.*;

public final class Blocks
{

{{blocks_values@1,BLOCKS}}

	public final String name;
	public final short id;
	public final BlockData java, bedrock;
	public final boolean solid;
	public final double hardness, blastResistance;
	public final byte opacity, luminance;
	public final boolean replaceable;

	private Blocks(String name, short id, BlockData java, BlockData bedrock, boolean solid, double hardness, double blastResistance, byte opacity, byte luminance, boolean replaceable)
	{
		this.name = name;
		this.id = id;
		this.java = java;
		this.bedrock = bedrock;
		this.solid = solid;
		this.hardness = hardness;
		this.blastResistance = blastResistance;
		this.opacity = opacity;
		this.luminance = luminance;
		this.replaceable = replaceable;
	}

	private static class BlockData
	{

		public final int id, meta;

		public BlockData(int id, int meta) {
			this.id = id;
			this.meta = meta;
		}

	}

	private static Map<Short, Blocks> selBlocks;
	private static Map<Integer, Map<Integer, Blocks>> javaBlocks, bedrockBlocks;

	static
	{
	
		selBlocks = new HashMap<Short, Blocks>();

		javaBlocks = new HashMap<Integer, Map<Integer, Blocks>>();
		bedrockBlocks = new HashMap<Integer, Map<Integer, Blocks>>();

		init1();
		init2();

	}
	
	private static void init1()
	{
{{add_blocks@2,BLOCKS[..1024]}}
	}
	
	private static void init2()
	{
{{add_blocks@2,BLOCKS[1024..]}}
	}

	private static void add(Blocks block)
	{
		selBlocks.put(block.id, block);
		if(block.java != null) {
			if(!minecraftBlocks.containsKey(block.java.id)) javaBlocks.put(block.java.id, new HashMap<Integer, Blocks>());
			javaBlocks.get(block.java.id).put(block.java.meta, block);
		}
		if(block.bedrock != null) {
			if(!bedrockBlocks.containsKey(block.bedrock.id)) bedrockBlocks.put(block.bedrock.id, new HashMap<Integer, Blocks>());
			bedrockBlocks.get(block.bedrock.id).put(block.bedrock.meta, block);
		}
	}

	public static Blocks getSelBlock(short id)
	{
		return selBlocks.get(id);
	}

	public static Blocks getJavaBlock(int id, int meta)
	{
		Map<Integer, Blocks> b = javaBlocks.get(id);
		return b != null ? b.get(meta) : null;
	}

	public static Blocks getPocketBlock(int id, int meta)
	{
		Map<Integer, Blocks> b = bedrockBlocks.get(id);
		return b != null ? b.get(meta) : null;
	}

}
--- end ---
# cannot use final because the code in the static
# constructor would be too big.
--- start blocks_values ---
public static Blocks {{NAME:uppercase}};
--- end ---
--- start add_blocks ---
add({{NAME:uppercase}} = new Blocks("{{NAME:spaced}}", (short){{ID}}, {{JAVA==true?new BlockData({{JAVA_ID}}, {{JAVA_META}})}}{{JAVA==false?null}}, {{BEDROCK==true?new BlockData({{BEDROCK_ID}}, {{BEDROCK_META}})}}{{BEDROCK==false?null}}, {{SOLID}}, (double){{HARDNESS}}, (double){{BLAST_RESISTANCE}}, (byte){{OPACITY}}, (byte){{LUMINANCE}}, {{REPLACEABLE}}));
--- end ---
